from abc import ABC, abstractmethod
from typing import Callable, Any
import json

class LessonProxy:
    """
    decides if a request gets processed in the LessonMaster. For now only first listening is hardcoded with video, the rest of listening is generated by models.
    """

    DATA_PATH = 'agent_service/utils/res/'
    def __init__(self, service_text: Callable[[], Any], service_exercises: Callable[[], Any]) -> None:
        self.service_text = service_text
        self.service_exercises = service_exercises

    def create_text(self, request: str):
        """
        reads text from a JSON file if the request starts with a specific
        string (mocking first listening with a video), otherwise it calls create_exercise function from the LessonMaster
        
        """
        self.request = request
        if request.startswith("[Listening][Ich stelle mich vor."):
            with open(self.DATA_PATH + 'layla/text.txt', 'r') as f:
                text = f.read()
            return {"text": text}
        elif request.startswith("[Listening]"):
            return {"text": "Höre die Aufnahme an und löse im Anschluss die Aufgaben.\n","audio": self.service_text(request)}
        elif request.startswith("[Reading]"):
            return {"text": "Lese den Text und löse im Anschluss die Aufgaben.\n" + self.service_text(request)}
        elif request.startswith("[Grammar]"):
            return {"text": "Hier ist die Grammatiklektion. Lese den Text und löse im Anschluss die Aufgaben.\n" + self.service_text(request)}
        else:
            raise NotImplementedError
        
    def create_exercises(self):
        """
        reads tasks from a JSON file if the request starts with a specific
        string, otherwise it calls create_exercise function from the LessonMaster
        
        """
        if self.request.startswith("[Listening][Ich stelle mich vor."):
            with open(self.DATA_PATH + 'layla/tasks.json', 'r') as f:
                tasks = json.load(f)
            return {'tasks' :tasks }
        else: 
            return self.service_exercises()
